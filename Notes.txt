run updatedb to make sure everything is up to date. Used for making sure created files are recognized in terminal.

locate test.txt ==> This will show the directory or better to say the address of test.txt in our machine

ls -la ==> This will show all the files and directories in list format.

List format will show us:
At the left most part we'll have couple of letters moving from left to right showing:
first left most letter is d or - which d is for directory and - is for file
The next 3 letters will be rwx or - for each this is for readable writeable executable if there's a - this means that for the item that specific process is not possible. These first 3 letters is for the owner of the file meaning root.
There are 2 3 letters part left everything is the same but for these the first 3 letters will be for group which root has created and the next 3 will be for all permissions meaning everyone else.

su Ali ==> Switches to Ali
su - ==> Switches to root

Important files:
/etc/passwd ==> For seeing the users on the machine (create new user by adduser Ali)
/etc/shadow ==> Passwords in hash format ==> Only root can access it or better to say sudoers ==> sudoers are kept for knowing which users can access certain files

ping -c 1 192.168.1.1 > ip.txt
cat ip.txt | grep "64 bytes" | cut -d " " -f 4 | tr -d ":"
First we ping the ip address and get some results that show either it's up or not. | will create new pipes meaning that after cat ip.txt we'll run grep "64 bytes" command. grep "64 bytes" will give out the line that has "64 bytes" in it. We have to find something unique about the results when the machine is up r down something like 64 bytes or 1 received 64 bytes is much better since it'll have the ip address on the same line. cut -d " " -f 4 is like sentence.split(" ")[4] starting from index zero. The 4th field is ip address of the machine that is up. The ip will have : at the end of it by running tr -d ":" we can get rid of it so at last we'll get the ip address that is up.

ipsweep.sh => find ips that are up in your network
##################################################
#!/bin/bash

for ip in `seq 1 254`; do
ping -c 1 $1.$ip | grep "64 bytes" | cut -d " " -f 4 | tr -d ":" &
done
##################################################
Notes from the script above:
$1 is user input meaning that when we run ./ipsweep.sh 192.168.1 in terminal $1 will be 192.168.1
$ip will be numbers from 1 to 254.
We can end the ping command with ; instead of & but & will use thread to run ipsweep all at once meaning that it'll us parallelism but ; will do each ping command then it'll go to the next one but with & all of them can be done in parallel.
After saving the script for running it we have to make it executable now it's just readable and writable for root. To make it executable we'll use chmod +x ipsweep.sh or chmod 777 ipsweep.sh now it'll be executable for everyone not just root.
After running it using ./ipsweep 192.168.1 > ipList.txt for example we'll have all the up ip addresses in the network saved in ipList.txt.

